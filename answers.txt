1. What is a promise? How/why is it used?
A promise is a way for Javascript to deal with requests and other actions that might take an indeterminate amount of time, or otherwise perform synchronously. For example, when you GET something, there's no telling when the request will come in, so the follow up code will execute before the response has a chance to come in. A promise is used here to explicitly state what pieces of code should execute when the response actually comes in. That said, these days I strongly prefer using async/await in the majority of my work.

2. What is a DTO? Why is it useful?
A DTO is a Data Transfer Object, which is a an object that is used to reduce the cost of multiple expensive operations into one single operation, that although is still expensive it will reduce the cost by a factor. An example of this is implementing this type of thing in the back end or the middleware, so that say a situation where you would fetch one call, and then from the client grab a property to use to query for another object, is combined into one call. The cost of lookup is still there, but we've successfully reduced the code from two client -> server loops to a single one, more or less halving our query time and page load time.

3. What is a CSRF? How can you protect against it?
A CSRF is a Cross-Site Request Forgery is basically an attack on a server where a malicious actor sends a bad modifying request, typically trying to change data into something they control (like passwords) or to just wreck the data if they really just want to burn everything down, or maybe transferring balances. Note that this form of attack requires the legitimate user to actually trigger the request, so something like auth/member tokens wouldn't necessarily actually protect from it. Another thing to keep in mind is that these are executed by sending fake URLs that actually represent the query + params the malicious actor would like to execute, or to use a fake website that executes the request. Two of the most popular methods of protection involve anti-CSRF tokens, and same-site cookies. Anti-CSRF tokens are constantly mutating tokens that are sent with requests, which prevent CSRF attacks because the actor would have to know the legitimate token to send with the request, which is difficult since CSRF attacks are executed external to the real site. Same-site cookies are basically what they sound like, cookies that are only used/sent for requests that are coming from the same origin, which prevents the attack due to the same externality prinicple from the other example.

4. Describe the following entities and their roles in an application:
  - Load Balancer
    A load balancer distributes traffic across multiple servers, which is useful in an application when you have 500 requests coming to 500 servers, it would make more sense for them all to go to separate servers. Also it would be useful for situations where server counts automatically scale up like AWS and all their business.
  - Cache
    A cache is something that stores fetched or calculated data so that it doesn't have to continually perform expensive operations over and over again. For example, if you are getting something like a member's 5000 line items, it would make sense to cache these requests, and to recache once an update/add/delete/etc request is applied and GETed
  - Session Storage
    Session storage is similar in principle to Cache, in the sense that it is used to store things so it can read them without repeating actions again. However it is more for things like, say, when you've read too many Medium articles in one week, they want you to see that probably only once per session, so they keep a variable in session storage to track that you've experienced the popup.
  - Automated Testing
    Automated testing is testing that encompasses both unit tests (which test smaller scale principles, like that a button turns disabled once you click it), and end to end testing (which is like a full flow from login to management of bank details). The role of this is to make sure that everything is working as expected upon some new updates being pushed and built. In my opinion, a healthy mix of manual testing is nice as well, as that "human" factor and product knowledge factor is something that gets forgotten sometimes when writing test scripts.
  - Database
    A database is where all the data for an app is stored. This can be things like user data, the user's owned line items, really anything that isn't hard coded into the page. Without a database, your app is more or less just a static page with changes that are at best temporary.